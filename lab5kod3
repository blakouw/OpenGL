#include <iostream>
#include <glad/glad.h>
#include <GLFW/glfw3.h>
using namespace std;

int main() {

	glfwInit();

	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);


	GLFWwindow* window = glfwCreateWindow(800, 800, "lab4", NULL, NULL);
	// Error check if the window fails to create
	if (window == NULL)
	{
		std::cout << "Failed to create GLFW window" <<
			std::endl;
		glfwTerminate();
		return -1;
	}
	// Introduce the window into the current context
	glfwMakeContextCurrent(window);


	//Load GLAD so it configures OpenGL
	gladLoadGL();
	// Specify the viewport of OpenGL in the Window
	// In this case the viewport goes from x = 0, y = 0, to x = 800, y = 800
	glViewport(0, 0, 800, 800);

	// Vertex Shader source code
	const char* vertexShaderSource = "#version 330 core\n"
		"layout (location = 0) in vec3 position;\n"
		"layout (location = 1) in vec3 color;\n"
		"out vec3 vertexColor;\n"
		"void main()\n"
		"{\n"
		" vertexColor = color;\n"
		" gl_Position = vec4(position, 1.0);\n"
		"}\0";
	//Fragment Shader source code
	const char* fragmentShaderSource = "#version 330 core\n"
		"in vec3 vertexColor;\n"
		"out vec4 fragColor;\n"
		"void main()\n"
		"{\n"
		" fragColor = vec4(vertexColor, 1.0f);\n"
		"}\n\0";

	// Utwórz obiekt Vertex Shader
	GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
	// Połącz istniejący obiekt z napisaną wcześniej implementacją shadera
	glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
	// Skompiluj gotowy kod
	glCompileShader(vertexShader);

	// Powtórz operację dla fragment shadera
	GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
	glCompileShader(fragmentShader);
	//sprawdzenie zaladowania shadera
	GLint isCompiled = 0;
	glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &isCompiled);
	glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &isCompiled);
	if (isCompiled == GL_FALSE)
	{
		GLint maxLength = 0;
		glGetShaderiv(vertexShader, GL_INFO_LOG_LENGTH, &maxLength);
		cout << "nie udalo sie zaladowac shadera";
		glDeleteShader(vertexShader); 
		glDeleteShader(fragmentShader); 
		return 0;
	}
	else if (isCompiled == GL_TRUE)
	{
		cout << "shadery zaladowane" << endl;

	}
	// Utwórz program
	GLuint shaderProgram = glCreateProgram();
	// Podłącz shadery pod program
	glAttachShader(shaderProgram, vertexShader);
	glAttachShader(shaderProgram, fragmentShader);
	glLinkProgram(shaderProgram);

	const int elemSize = 150;//50*3

	float x = -1.f;
	float y = -1.f;
	float dx = 0.2f;
	float dy = 0.2f;
	int q = 0;
	int p = 0;

	cout << "vertices" << endl;
	GLfloat vertices[361];
	for (int i = 0; i < 361;)
	{
		for (int j = 0; j < 11; j++)
		{
			vertices[i] = x + (dx * j);
			vertices[i + 1] = y + (dy * q);
			vertices[i + 2] = 0.0f;
			cout << "x: " << vertices[i] << "\t" << "y: " << vertices[i + 1] << "\t" << "z: " << vertices[i + 2] << endl;
			i += 3;
		}

		q++;
	}

	cout << "\n" << "indices" << endl;
	GLuint indices[elemSize];
	for (int i = 3; i <= 110; i += 2, p = p + 3)
	{
		indices[p] = i - 2;
		indices[p + 1] = i - 1;
		indices[p + 2] = i + 10;

		cout << indices[p] << "\t" << indices[p + 1] << "\t" << indices[p + 2] << endl;

		if (i % 21 == 0 && i / 21 != 5 && i / 21 != 3 || i % 43 == 0 || i % 65 == 0 || i % 87 == 0)
		{
			i += 2;
		}
	}

	GLuint VAO, VBO, EBO;
	// Utwórz obiekty VBO i VAO, każdy posiada jeden obiekt
	glGenVertexArrays(1, &VAO);
	glGenBuffers(1, &VBO);
	glGenBuffers(1, &EBO);
	// Połącz wierzchołki z bufforem wierzchołków
	glBindVertexArray(VAO);
	// Ustaw typ VBO
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	// załaduj przygotowane wierzchołki
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);
	// Skonfiguruj format buffora, typ danych i długość
	//glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
	GLint posAttrib = glGetAttribLocation(shaderProgram, "position");
	glEnableVertexAttribArray(posAttrib);
	glVertexAttribPointer(posAttrib, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	GLint colAttrib = glGetAttribLocation(shaderProgram, "color");
	glEnableVertexAttribArray(colAttrib);
	glVertexAttribPointer(colAttrib, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(2 * sizeof(float)));
	glEnableVertexAttribArray(0);
	// Uruchom buffor
	glEnableVertexAttribArray(0);
	glBindVertexArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, 0);



	while (!glfwWindowShouldClose(window))
	{
		glClearColor(0.188f, 0.196f, 0.117f, 0.117f);
		// Wyczyść buffor I nadaj mu kolor
		glClear(GL_COLOR_BUFFER_BIT);
		// Wybierz, który shader będzie używany
		glUseProgram(shaderProgram);
		glBindVertexArray(VAO);
		glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
	
		glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
		glDrawElements(GL_TRIANGLES, elemSize, GL_UNSIGNED_INT, 0);
		// Odśwież widok
		glfwSwapBuffers(window);
		glfwPollEvents();
	}

	// Delete window before ending the program
	glfwDestroyWindow(window);
	// Terminate GLFW before ending the program
	glfwTerminate();

	glDeleteVertexArrays(1, &VAO);
	glDeleteBuffers(1, &VBO);
	glDeleteBuffers(1, &EBO);
	glDeleteProgram(shaderProgram);
	//delete[] vertices;
	//delete[] indices;

	return 0;
}
